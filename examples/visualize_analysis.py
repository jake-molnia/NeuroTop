#%% --- 1. SETUP: Configure your analysis file path ---

# IMPORTANT: Before running, change this path to point to your .npz analysis file.
# This should be a file generated by the `train` command to see the evolution.
ANALYSIS_FILE_PATH = './outputs/bert_5_epoch_run/topology_evolution.npz'

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
import os

# Check if the file exists before proceeding
if not os.path.exists(ANALYSIS_FILE_PATH):
    raise FileNotFoundError(
        f"Analysis file not found at: {ANALYSIS_FILE_PATH}\n"
        "Please update the ANALYSIS_FILE_PATH variable in the first cell."
    )

print("Setup complete. You can now run the subsequent cells.")

#%% --- 2. LOAD DATA: Load and inspect the analysis file ---

print(f"Loading data from: {ANALYSIS_FILE_PATH}")
analysis_data = np.load(ANALYSIS_FILE_PATH, allow_pickle=True)

# Determine the type of analysis file and extract the relevant data
if 'topology_states' in analysis_data:
    print("Detected a training evolution file with multiple states.")
    topology_states = analysis_data['topology_states']
    final_state = topology_states[-1]
elif 'state' in analysis_data:
    print("Detected a single analysis state file.")
    final_state = analysis_data['state'].item()
    topology_states = None
else:
    raise ValueError("Invalid analysis file. Could not find 'state' or 'topology_states'.")

# Extract the component-wise results for easy access in other cells
by_components = final_state.get('by_components', {})
if not by_components and 'full_network' in final_state:
    by_components = {'full_network': final_state['full_network']}

print(f"Successfully loaded data. Found {len(by_components)} component(s): {list(by_components.keys())}")
if topology_states is not None:
    print(f"Found evolution data for {len(topology_states)} epoch(s).")

#%% --- 3. PLOT RF DISTRIBUTIONS (Final Epoch) ---
# This cell creates a histogram of RF_0 values for each component at the *final* epoch.

print("Generating RF_0 Distribution plots for the final epoch...")

for component_name, results in by_components.items():
    all_rf_vals = []
    if 'rf_values' in results:
        for layer_rf in results['rf_values'].values():
            if 'rf_0' in layer_rf:
                all_rf_vals.extend(layer_rf['rf_0'])
    
    if all_rf_vals:
        plt.figure(figsize=(10, 6))
        plt.hist(all_rf_vals, bins=50, alpha=0.75, color='royalblue', edgecolor='black')
        plt.xlabel('RF_0 Value (Topological Importance)')
        plt.ylabel('Number of Neurons')
        plt.title(f'Final RF_0 Distribution for Component: {component_name.title()}')
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.show()

#%% --- 4. PLOT RF EVOLUTION (Ridge Plot) ---
# This cell shows how the distribution of RF values changes over epochs for each component.
# NOTE: This cell only works if you loaded a training evolution file.

print("Generating RF Distribution Evolution (Ridge Plot)...")

if topology_states is not None:
    component_names = by_components.keys()
    fig, axes = plt.subplots(len(component_names), 1, figsize=(12, 4 * len(component_names)), squeeze=False)
    
    for i, comp_name in enumerate(component_names):
        ax = axes[i, 0]
        epochs = [state['epoch'] for state in topology_states]
        
        for epoch_idx, state in enumerate(topology_states):
            all_rf_values_for_comp = []
            component_data = state.get('by_components', {}).get(comp_name, {})
            if 'rf_values' in component_data:
                for layer_rf in component_data['rf_values'].values():
                    if 'rf_0' in layer_rf:
                        all_rf_values_for_comp.extend(layer_rf['rf_0'])
            
            if all_rf_values_for_comp:
                counts, bins = np.histogram(all_rf_values_for_comp, bins=40, density=True)
                bin_centers = (bins[:-1] + bins[1:]) / 2
                y_offset = epoch_idx * 0.5
                ax.fill_between(bin_centers, y_offset, y_offset + counts, alpha=0.6, label=f"Epoch {state['epoch']}")
                ax.plot(bin_centers, y_offset + counts, color='black', alpha=0.7, linewidth=1)

        ax.set_title(f'RF_0 Distribution Evolution - {comp_name.title()}')
        ax.set_xlabel('RF_0 Value')
        ax.set_ylabel('Epoch (offset)')
        ax.legend(loc='upper right')
        
    plt.tight_layout()
    plt.show()
else:
    print("Skipping evolution plots: No training history found.")